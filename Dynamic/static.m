clear y x G con z w P B
BIGM = 1e5;
if U>0
	y = binvar(D,S,E,'full');							% subcarrier e in RU i used for split s
	x = binvar(U,E,S,F,'full');							% user u used split s with func f
	w = binvar(D,E,S,'full');							% auxiliary var for interference avoidance in common area
														% each cell has common area with other cells except itself
	R_res = loss_gain.*R4;
	P_res = C4.*P4;
	B_res = C4.*B4;
	G_old = x_old*beta + 1;

	con = [sum(y,2) == 1, sum(sum(sum(x, 4),3),2) == 1];
	
	if func_state==no_func
		con = [con, x(:,:,:,do_func) == 0];
	end
	
	P = sdpvar(D,1,'full');
	B = sdpvar(D,1,'full');
	
	for i=1:D
		ji = (i==reg1)*reg21 + (i==reg2)*reg12;		% interfere signal
		j = (i==reg1)*reg2 + (i==reg2)*reg1;
		if ~isempty(u_reg{i}) && ~isempty(u_reg{ji})
			P(i) = P_0(i) + sum(sum(sum(sum(x(u_reg{i},:,:,:).* ...
						P_res(u_reg{i},:,:,:))))) + ...
						sum(sum(x(u_reg{ji},:,split7_1,do_func).* ...
						P_res(u_reg{ji},:,split7_1,do_func)));
			B(i) = B_0(i) + sum(sum(sum(sum(x(u_reg{i},:,:,:).* ...
						B_res(u_reg{i},:,:,:))))) + ...
						sum(sum(x(u_reg{ji},:,split7_1,do_func).* ...
						B_res(u_reg{ji},:,split7_1,do_func)));
			con = [con, P(i) <= P_RU, B(i) <= B_RU, ...
				   T_0(i,:,:) + TP_0(i,:,:) + sum(sum(x(u_reg{i},:,:,:).* ...
						T4(u_reg{i},:,:,:),4),1) + ...
						sum(sum(x(u_reg{ji},:,:,:).* ...
						T4(u_reg{ji},:,:,:),4),1) <= T_RU/E* ...
						permute(y(i,:,:),[1,3,2]) + BIGM*w(i,:,:), ...
				   T_0(i,:,:) + sum(sum(x(u_reg{i},:,:,:).* ...
						T4(u_reg{i},:,:,:),4),1) + ...
						sum(x(u_reg{ji},:,:,do_func).* ...
						T4(u_reg{ji},:,:,do_func),1) <= BIGM*(1-w(i,:,:))];
		elseif isempty(u_reg{i}) && ~isempty(u_reg{ji})
			P(i) = P_0(i) + sum(sum(x(u_reg{ji},:,split7_1,do_func).* ...
						P_res(u_reg{ji},:,split7_1,do_func)));
			B(i) = B_0(i) + sum(sum(x(u_reg{ji},:,split7_1,do_func).* ...
						B_res(u_reg{ji},:,split7_1,do_func)));
			con = [con, P(i) <= P_RU, B(i) <= B_RU, T_0(i,:,:) + ...
						TP_0(i,:,:) + sum(sum(x(u_reg{ji},:,:,:).* ...
						T4(u_reg{ji},:,:,:),4),1) <= T_RU/E* ...
						permute(y(i,:,:),[1,3,2]) + BIGM*w(i,:,:), ...
				   T_0(i,:,:) + sum(x(u_reg{ji},:,:,do_func).* ...
						T4(u_reg{ji},:,:,do_func),1) <= BIGM*(1-w(i,:,:))];
		elseif ~isempty(u_reg{i}) && isempty(u_reg{ji})
			P(i) = P_0(i) + sum(sum(sum(sum(x(u_reg{i},:,:,:).* ...
						P_res(u_reg{i},:,:,:)))));
			B(i) = B_0(i) + sum(sum(sum(sum(x(u_reg{i},:,:,:).* ...
						B_res(u_reg{i},:,:,:)))));
			con = [con, P(i) <= P_RU, B(i) <= B_RU, T_0(i,:,:) + ...
						TP_0(i,:,:) + sum(sum(x(u_reg{i},:,:,:).* ...
						T4(u_reg{i},:,:,:),4),1) <= T_RU/E* ...
						permute(y(i,:,:),[1,3,2]) + BIGM*w(i,:,:), ...
				   T_0(i,:,:) + sum(sum(x(u_reg{i},:,:,:).* ...
						T4(u_reg{i},:,:,:),4),1) <= BIGM*(1-w(i,:,:))];
		end
	end
	
	if fairness
		z = intvar(D,1,'full');
		con = [con, P_RU*B - B_RU*P <= (B_RU*P_RU/z_coef)*z, ...
			B_RU*P - P_RU*B <= (B_RU*P_RU/z_coef)*z, z >= 0];
	else
		z = 0;
	end
	
	G = -alpha(1)*sum(sum(sum(sum(x.*R_res.*G_old)))) ...
			-alpha(2)*sum(sum(y(:,blocked_con,:),3)) ...
			+sum(alpha(3)*z);
	
	options = sdpsettings('solver', 'cplex', 'verbose',1, 'debug', 1, ...
		'warning', 1, 'removeequalities', 0, 'showprogress', 1, 'cplex.timelimit', 60);
	results = optimize(con, G, options);

	if results.problem~=0 && results.problem~=3
		input('Error: Cannot find a solution, infeasible problem.');
	end
end
