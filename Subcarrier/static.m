
%%
clear y x G con
BIGM = 1e5;
P_0 = zeros(D,1);								% last resource usage status
B_0 = zeros(D,1);
T_0 = zeros(D,E,S);
	
y = binvar(D,S,E);								% subcarrier e in RU i used for split s
x = binvar(U,E,S,F);							% user u used subcarrier e and split s with func f
w = binvar(D,E);								% auxiliary var for interference avoidance in common area
												% each cell has common area with other cells except itself

G = -alpha*sum(sum(sum(sum(x .* (loss_gain.*R4))))) ...
	-beta*sum(sum(y(:,blocked_con,:),3));
con = [sum(y,2)==1, sum(sum(sum(x, 4),3),2)==1];

if func_state==no_func
	con = [con, x(:, :, :, do_func)==0];
end

for i=1:D
	j = (i==1)*2 + (i==2)*1;											% only for 2 regions
	con = [con, P_0(i) + sum(sum(sum(sum(x(u_reg{i},:,:,:).* ...
				loss_gain(u_reg{i},:,:,:).*P4(u_reg{i},:,:,:))))) + ...
				sum(sum(x(u_reg{D+j},:,split7_1,do_func).* ...
				loss_gain(u_reg{D+j},:,split7_1,do_func).* ...
				P4(u_reg{D+j},:,split7_1,do_func)))<=P_RU];
	con = [con, B_0(i) + sum(sum(sum(sum(x(u_reg{i},:,:,:).* ...
				loss_gain(u_reg{i},:,:,:).*B4(u_reg{i},:,:,:))))) + ...
				sum(sum(x(u_reg{D+j},:,split7_1,do_func).* ...
				loss_gain(u_reg{D+j},:,split7_1,do_func).* ...
				B4(u_reg{D+j},:,split7_1,do_func)))<=B_RU];
	con = [con, T_0(i,:,split7_1) + sum(sum(x(u_reg{i},:,split7_1,:).* ...
				T4(u_reg{i},:,split7_1,:),4)) + ...
				sum(sum(x(u_reg{D+j},:,split7_1,:).* ...
				T4(u_reg{D+j},:,split7_1,:),4)) <= T_RU/E* ...
				sum(y(i,split7_1,:))];
	con = [con, T_0(i,:,split2) + sum(sum(x(u_reg{i},:,split2,:).* ...
				T4(u_reg{i},:,split2,:),4)) <= T_RU/E* ...
				sum(y(i,split2,:))];
	con = [con, sum(x(u_reg{i+D},:,split2,no_func)) <= BIGM*w(i,:), ...
				permute(1-y(j,blocked_con,:),[1,3,2]) <= BIGM*(1-w(i,:))];
end

options = sdpsettings('solver', 'cplex', 'verbose',1, 'debug', 1, ...
	'warning', 1, 'removeequalities', 0, 'showprogress', 1, 'cplex.timelimit', 10);
results = optimize(con, G, options);

for i=1:D
	j = (i==1)*2 + (i==2)*1;
	B_0(i) = B_0(i) + sum(sum(sum(sum(value(x(u_reg{i},:,:,:)).* ...
					  loss_gain(u_reg{i},:,:,:).*B4(u_reg{i},:,:,:))))) + ...
					  sum(sum(value(x(u_reg{D+j},:,split7_1,do_func)).* ...
					  loss_gain(u_reg{D+j},:,split7_1,do_func).* ...
					  B4(u_reg{D+j},:,split7_1,do_func)));
	P_0(i) = P_0(i) + sum(sum(sum(sum(value(x(u_reg{i},:,:,:)).* ...
					  loss_gain(u_reg{i},:,:,:).*P4(u_reg{i},:,:,:))))) + ...
					  sum(sum(value(x(u_reg{D+j},:,split7_1,do_func)).* ...
					  loss_gain(u_reg{D+j},:,split7_1,do_func).* ...
					  P4(u_reg{D+j},:,split7_1,do_func)));
	T_0(i,:,split7_1) = T_0(i,:,split7_1) + ...
					  sum(sum(value(x(u_reg{i},:,split7_1,:)).* ...
					  T4(u_reg{i},:,split7_1,:),4)) + ...
					  sum(sum(value(x(u_reg{D+j},:,split7_1,:)).* ...
					  T4(u_reg{D+j},:,split7_1,:),4));
	T_0(i,:,split2) = T_0(i,:,split2) + ...
					  sum(sum(value(x(u_reg{i},:,split2,:)).* ...
					  T4(u_reg{i},:,split2,:),4));
end
sum_rate = sum(sum(sum(sum(value(x) .* (R4.*loss_gain)))));
